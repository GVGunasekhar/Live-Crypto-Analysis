# -*- coding: utf-8 -*-
"""Primetrade ai - assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vVfE-psP74rjI21CZe6KHvkE_J3NeA4A

#**The top 50 cryptocurrencies by market capitalization.**

#Step 1:Fetch Data and Export to Excel

Install Required Libraries
"""

# Install required libraries
!pip install requests pandas openpyxl

import requests
import pandas as pd
from openpyxl import Workbook
from openpyxl.utils.dataframe import dataframe_to_rows
import time

# File name for the Excel output
EXCEL_FILE = "Live_Crypto_Data.xlsx"

# Function to fetch live cryptocurrency data
def fetch_crypto_data():
    API_URL = "https://api.coingecko.com/api/v3/coins/markets"
    PARAMS = {
        'vs_currency': 'usd',
        'order': 'market_cap_desc',
        'per_page': 50,
        'page': 1
    }

    try:
        response = requests.get(API_URL, params=PARAMS)
        response.raise_for_status()
        data = response.json()
        # Create DataFrame
        df = pd.DataFrame(data)
        # Select required fields
        df = df[['id', 'symbol', 'current_price', 'market_cap',
                 'total_volume', 'price_change_percentage_24h']]
        print("Data fetched successfully!")
        return df
    except Exception as e:
        print(f"Error fetching data: {e}")
        return pd.DataFrame()

# Function to write data to Excel file
def update_excel(df, file_path=EXCEL_FILE):
    try:
        # Create a new Workbook
        wb = Workbook()
        ws = wb.active
        ws.title = "Live Crypto Data"

        # Write DataFrame to Excel
        for row in dataframe_to_rows(df, index=False, header=True):
            ws.append(row)

        # Save the file
        wb.save(file_path)
        print(f"Data updated in {file_path}")
    except Exception as e:
        print(f"Error updating Excel file: {e}")

# Continuous updating process
def live_update(interval=300):  # Default interval: 300 seconds (5 minutes)
    print("Starting live updates... Press Ctrl+C to stop.")
    try:
        while True:
            # Fetch data and update Excel
            crypto_data = fetch_crypto_data()
            if not crypto_data.empty:
                update_excel(crypto_data)
            else:
                print("No data fetched this time. Retrying in the next interval.")

            # Wait for the next update
            time.sleep(interval)
    except KeyboardInterrupt:
        print("\nLive updates stopped.")

# Run live update
live_update(interval=300)  # Update every 5 minutes

"""#Step 2: Perform Data Analysis

"""

import pandas as pd

# Define the path to your Excel file
EXCEL_FILE = "/content/Live_Crypto_Data.xlsx"

# Load data from the Excel file
try:
    crypto_data_from_excel = pd.read_excel(EXCEL_FILE)
    print("Data successfully loaded from Excel!")
except FileNotFoundError:
    print(f"Error: The file {EXCEL_FILE} was not found. Please ensure it exists.")
    raise
except Exception as e:
    print(f"An error occurred while loading the file: {e}")
    raise

# Function to perform analysis
def analyze_crypto_data(df):
    # Top 5 cryptocurrencies by market capitalization
    top_5 = df.nlargest(5, 'market_cap')[['id', 'market_cap']]

    # Average price of top 50 cryptocurrencies
    avg_price = df['current_price'].mean()

    # Highest and lowest 24-hour percentage change
    highest_change = df.loc[df['price_change_percentage_24h'].idxmax()]
    lowest_change = df.loc[df['price_change_percentage_24h'].idxmin()]

    # Print analysis
    print("\n--- Crypto Data Analysis ---")
    print("Top 5 Cryptocurrencies by Market Cap:")
    print(top_5)
    print(f"\nAverage Price of Top 50 Cryptocurrencies: ${avg_price:.2f}")
    print(f"\nHighest 24-hour Price Change: {highest_change['id']} ({highest_change['price_change_percentage_24h']}%)")
    print(f"Lowest 24-hour Price Change: {lowest_change['id']} ({lowest_change['price_change_percentage_24h']}%)")

# Perform the analysis
analyze_crypto_data(crypto_data_from_excel)